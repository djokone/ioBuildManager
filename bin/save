#! /usr/bin/env node
var Io = require('iorizon-cli')
var Event = require('events')
require('iorizon-cli/bin/lib/debugger')
var FM = require('../lib/FileManager.js')
var inquirer = require('inquirer')
let fs = require('fs')
let path = require('path')
let state = new Event()
let color = require('chalk')

let save = new Io()
let to = save.options.destination
if (save.options.name) {
  to = path.resolve(to, save.options.name)
}

let runSaveCmd = function (options) {
  let Files = new FM({
    includes: save.options.include,
    destination: options.dest
  })
  Files.on('allMatched', () => {
    console.log(Files.includeFiles)
  })
  Files.copyIncludeFiles()
  Files.on('copy', () => {
    console.log('copyyyyyyyyyy')
  })
  Files.on('successCopy', () => {
    console.log('copy finish !')
  })
}
var questions = [
  {
    type: 'input',
    name: 'name',
    message: 'What\'s your saving repository name ?',
    default: save.options.name
  },
  {
    type: 'confirm',
    name: 'dest',
    default: true,
    message (answers) {
      return "Confirm your saving repository path below ? \n " + color.green(path.resolve(to, answers.name))
    },
    filter (answers) {
      if (answers.dest) {
        return path.resolve(to, answers.name)
      } else {
        return false
      }
    }
  },
  {
    type: 'input',
    name: 'dest',
    message: "What's your new destination path ?",
    validate (input) {
      let done = this.async
      if (path.isAbsolute(input)) {
        return true
      }
      return 'Has to be an absolute path !'
    },
    when (answers) {
      if (answers.dest === false) {
        return true
      } else {
        return false
      }
    }
  }
]

if (save.options.interactive) {
  inquirer.prompt(questions).then(runSaveCmd) 
} else {
  runSaveCmd({
    dest: path.resolve(to)
  })
}
 

// let success = false

// let error = {}
// let existInCurrent = function (folder) {
//   return fs.existsSync(path.resolve(save.current.url, folder))
// }



// let getFiles = function () {
//   let glob = require("glob").Glob
//   let filesGlob = []
//   let options = {
//     cwd: save.current.url
//   }
//   for (let inc of save.options.include) {
//     console.log(inc)
//     filesGlob.push(new glob(inc, options, function (err, files) {
//       console.log(err)
//       console.log(files)
//     }))
//   }
// }


// if (!Array.isArray(save.options.folder) && existInCurrent(save.options.include)) {
//   success = true
// } else {
  
//   let inSuccess = true
//   for (let f of save.options.folder) {
//     if (!existInCurrent(f)) {
//       inSuccess = false
//       error[f] = path.normalize(path.resolve(save.current.url))
//     }
//   }
//   if (inSuccess) {
//     success = true
//   }
// }

// if (!success) {
//   for (let err in error) {
//     console.error(err + ' file doesn\'t exist in ' + error[err] + ' folder')
//   }
// }
// if (fs.existsSync(path.resolve(save.current.url, moduleBuildConf.folder))) {

// }
// console.log(save.current.modules.content[save.parentCmd[0]])